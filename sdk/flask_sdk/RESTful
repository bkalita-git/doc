RESTful is if the api implementation matches with REST(REpresentational State Transfer) architectural style by Roy Fielding in 2000. using HTTP as implementation for REST it is easy. By why rest is invented.
	Before 2000, there was no design approach to API.
	REST is based on the idea that you should send data but also information on how to consume the data.
	from corba>soap>rest>graph ql
	it is resource based than service based in other system: resources vs methods : url vs get_userdata()
	resources are identified by URI
	representations are seperates from resources.
	eg:
		resource: person(todd) 
		service: contact information(GET)
		representations: name,address,phone in JSON or XML
Rest has 6 GUIDING PRINCIPLES/CONSTRAINTS
	1. Uniform Interface
		Select/define the interface between client and server
			eg: we can select HTTP verbs(GET,PUT,POST,DELETE)
				we can use URIs as resource name
				HTTP response(status, body)
			eg: we can select other than HTTP also.
	2. Client-server:
		dealing with disconnection system. client does not need to worry about the database about queries.
	3. Stateless:
		No session of client.
		everything if need should be included in the request.
		eg: three-legged oauth2 is restlike because it is stateful so it is not stateless and should not use.
	4. Cacheable:
		server responses i.e. representations are cacheable
			Implicitly : if it's not denoted and client caches
			Explicitly : server specifies what max_age, duration
			Negotiated : client server negotiated how long it can cache
	5. Layered system
		client should not concered about where the request goes further or where if server cached or not.
	6. Code on demand(optional)
		server can temporarily extend a client by transfering logic/executable as representations, eg, javascript snippets
		
	
	
from frame<----IP<-----TCP<--HTTP
A HTTP packet is like a block of Text. the text contains

here's how HTTP-REQUEST contains
	1. Request line: METHOD_TOKEN space Request_URI space Protocol_ver CRLF_ending(ASCII 13 '\r' ASCII 10 '\n' ie. \r\n)
	2. zero or more headers (3 types: General|Request|Entity) each field followed by a CRLF_ending
	3. An empty line (i.e., a line with nothing preceding the CRLF) indicating the end of the header fields
	4. Optionally a message-body


	eg:
	GET /hello.htm HTTP/1.1	------------------------------------------Request line
	User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT) -------Request header
	Host: www.tutorialspoint.com -------------------------------------Request header
	Accept-Language: en-us -------------------------------------------Request header
	Accept-Encoding: gzip, deflate -----------------------------------Request header
	Connection: Keep-Alive -------------------------------------------General header

here's how HTTP-RESPONSE contains
	1. A status line: Protocol_ver space Status_code sp Reason_phrase CRLF
	2. zero or more headers (3 types: General|Response|Entity|Representation) each field followed by a CRLF_ending
	3. An empty line (i.e., a line with nothing preceding the CRLF) indicating the end of the header fields
	4. Optionally a message-body

	eg:
	HTTP/1.1 200 OK --------------------------------------------------Status line
	Date: Mon, 27 Jul 2009 12:28:53 GMT ------------------------------General header
	Server: Apache/2.2.14 (Win32) ------------------------------------Response header
	Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT ---------------------Response header
	Content-Length: 88 -----------------------------------------------Entity header
	Content-Type: text/html ------------------------------------------Representation header
	Connection: Closed -----------------------------------------------General header
	<html>
	<body>
	<h1>Hello, World!</h1>
	</body>
	</html>



	
Interesting Question:
	you can send data to the server because it's public but how the server knows you to send the response? 
	ans: It's allabout UDP hole punching like that, because the response send by server is send to a public server/relay which have the mapping to your computer.
#REFERENCES
1. https://www.tutorialspoint.com/http/http_requests.htm
2. https://www.tutorialspoint.com/http/http_responses.htm
3. https://chelseatroy.com/2018/08/01/api-design-part-1-before-there-was-rest/
4. https://www.restapitutorial.com/lessons/whatisrest.html
