#we will be using 
	Communication Api Architecture: RESTful
	Communication protocol: HTTP
	container: docker
	server: nginx
	paas: aws
	framework: Flask
	template engine: jinja
	DB :Flask-SQLAlchemy
	wsgi-toolkit: werkzeug
	Python Concepts in Flask: Decorator, Template Engine, module and package application

	#pip packages
		flask
		flask_sqlalchemy
		flask_restful
		PyJWT
		razorpay
	
	app structure: Package (not module)

1. Make local python environment inside a project folder
	$ mkdir flask_project_1
	$ cd flask_project_1
	$ python3 -m venv venv
	$ . venv/bin/activate #python command will be use from local
	$ deactivate #back to original system python command


2. install flask
	$ pip install Flask
	
**do not rename as flask.py
**no need to export FLASK_APP if the file name is wsgi.py or app.py
**learn decorator


3.  $ export FLASK_APP=hello
	$ flask run
	$ flask run --host=0.0.0.0 # for listening to every public IP
	$ export FLASK_ENV=development #for enabling debug mode, live changing in code to reflect


**HTML ESCAPING
	what if client input a javascript instruction and server returns it then it will execute in clients browser, but it would have returned as a text.
	for that use HTML ESCAPING, but it can be achieved by template engine such as JINJA
	from markupsafe import escape
	escape(js_string)

**variable rules
	@app.route('/post/<int:post_id>')
	def display(post_id):
		return "here post_id is an integer,that's why this function executes"
	converter: string, int, float, path, uuid

**trailing slash
	@app.route('/about/')
	in browser ip/about will be redirected(by flask) to ip/about/ 	which helps search engines avoid indexing the same page twice.
	
	@app.route('/about')
	and in browser if '/about/' it produce error since it does not match with "/about/"


**url building for specific function
	from flask import url_for
	@app.route('/user/<username>')
	def profile(username):
		return f'{username}\'s profile'
	with app.test_request_context():
		print(url_for('profile',username='John Doe')) #function name as argument
	op: /user/John%20Doe

**handling different http methods
	by default route only answers to GET req. but can be extend
	
	@app.route('/login',methods=['GET','POST'])
	
	for GET, flask automatically adds support for the HEAD methods and OPTIONS is automatically implemented.

**static files
	$ mkdir static
	
	url_for('static', filename='style.css') # generates url for static/style.css 

**rendering templates
	flask configures the jinja2 template engine automatically.
	from flask import render_template
	
	@app.route('/hello/')
	@app.route('/hello/<name>')
	def hello(name=None):
		return render_template('hello.html', name=name)
	
	case1: a module
	
	/application.py
	/templates
		/hello.html
	
	case2: a package
	
	/application
		/__init__.py
		/templates
		    /hello.html
    
    inside hello.html since it's a template I will have access to the config,request,session ad g objects as well as the url_for() and get_flashed_messages() function.
    
    use template inheritance to keep same header, navigation, footer.

**request objects
	from flask import request

**file uploads
	from werkzeug.utils import secure_filename

**cookies
	request.cookies

**redirects and errors
	from flask import abort,redirect,url_for

**responses
	from flask import make_response

**APIs with JSON
	from flask import jsonify

**sessions
	from flask import session

4. Deploying for production
	$ 

*NOTE wsgi = web server gateway interface
	- forward requests to/from apache/nginx to backend such as python application.

#References
1. https://flask.palletsprojects.com/en/2.0.x/quickstart/#context-locals
2. https://flask.palletsprojects.com/en/2.0.x/

